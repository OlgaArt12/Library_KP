// <auto-generated />
using System;
using Library_KP.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Library_KP.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20220110132420_InitialSetup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "Cyrillic_General_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Library_KP.Models.Book", b =>
                {
                    b.Property<int>("RegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("RegistrationID")
                        .UseIdentityColumn();

                    b.Property<string>("Author")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("('There is no author')");

                    b.Property<string>("NameBook")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name_book");

                    b.Property<int>("NumberOfPage")
                        .HasColumnType("int")
                        .HasColumnName("Number_of_page");

                    b.Property<int?>("PartitionName")
                        .HasColumnType("int");

                    b.Property<int?>("YearOfPublication")
                        .HasColumnType("int")
                        .HasColumnName("Year_of_publication");

                    b.HasKey("RegistrationId")
                        .HasName("PK_RegistrationID");

                    b.HasIndex("PartitionName");

                    b.ToTable("Book");
                });

            modelBuilder.Entity("Library_KP.Models.Partition", b =>
                {
                    b.Property<int>("PartitionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PartitionID")
                        .UseIdentityColumn();

                    b.Property<string>("NamePartition")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name_Partition")
                        .HasDefaultValueSql("('Otsutstvuet')");

                    b.HasKey("PartitionId");

                    b.HasIndex(new[] { "NamePartition" }, "C_namePart")
                        .IsUnique();

                    b.ToTable("Partition");
                });

            modelBuilder.Entity("Library_KP.Models.Reader", b =>
                {
                    b.Property<int>("NumberTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Fcs")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FCS");

                    b.Property<string>("HomeAddress")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Home_address")
                        .HasDefaultValueSql("('There is no home address')");

                    b.Property<long>("PassportData")
                        .HasColumnType("bigint")
                        .HasColumnName("Passport_data");

                    b.HasKey("NumberTicket")
                        .HasName("PK_NumberTicket");

                    b.HasIndex(new[] { "PassportData" }, "AK_Passport_data")
                        .IsUnique();

                    b.HasIndex(new[] { "PassportData" }, "C_Reader_PassportOne")
                        .IsUnique();

                    b.HasIndex(new[] { "Fcs" }, "ix_red_fcs");

                    b.HasIndex(new[] { "NumberTicket" }, "ix_red_numtick")
                        .IsUnique();

                    b.HasIndex(new[] { "PassportData" }, "ix_red_pd_fcs");

                    b.ToTable("Reader");
                });

            modelBuilder.Entity("Library_KP.Models.Terminal", b =>
                {
                    b.Property<int>("TerminalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TerminalID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("date")
                        .HasColumnName("Date_issue");

                    b.Property<int>("NumberTickets")
                        .HasColumnType("int");

                    b.Property<int>("RegistrationBookId")
                        .HasColumnType("int")
                        .HasColumnName("Registration_Book_ID");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Return_date");

                    b.HasKey("TerminalId");

                    b.HasIndex("RegistrationBookId");

                    b.HasIndex(new[] { "DateIssue" }, "ix_ter_dateiss");

                    b.HasIndex(new[] { "NumberTickets" }, "ix_ter_numtick");

                    b.ToTable("Terminal");
                });

            modelBuilder.Entity("Library_KP.Models.VCountBookPart", b =>
                {
                    b.Property<int?>("CountPartBook")
                        .HasColumnType("int")
                        .HasColumnName("Count_Part_Book");

                    b.Property<string>("NamePartition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name_Partition");

                    b.ToView("v_countBookPart");
                });

            modelBuilder.Entity("Library_KP.Models.WatchReader", b =>
                {
                    b.Property<string>("Fcs")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FCS");

                    b.Property<string>("HomeAddress")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Home_address");

                    b.Property<int>("NumberTicket")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<long>("PassportData")
                        .HasColumnType("bigint")
                        .HasColumnName("Passport_data");

                    b.ToView("watchReader");
                });

            modelBuilder.Entity("Library_KP.Models.WatchTerminal", b =>
                {
                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("date")
                        .HasColumnName("Date_issue");

                    b.Property<string>("Fcs")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FCS");

                    b.Property<string>("NameBook")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name_book");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Return_date");

                    b.Property<int>("TerminalId")
                        .HasColumnType("int")
                        .HasColumnName("TerminalID");

                    b.ToView("watchTerminal");
                });

            modelBuilder.Entity("Library_KP.Models.ZaprosNew", b =>
                {
                    b.Property<string>("Author")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CountBookNeedReturn")
                        .HasColumnType("int")
                        .HasColumnName("countBookNeedReturn");

                    b.Property<DateTime>("DateIssue")
                        .HasColumnType("date")
                        .HasColumnName("Date_issue");

                    b.Property<string>("Fcs")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FCS");

                    b.Property<string>("NameBook")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name_book");

                    b.Property<int>("NumberTickets")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("date")
                        .HasColumnName("Return_date");

                    b.ToView("ZaprosNew");
                });

            modelBuilder.Entity("Library_KP.Models.Book", b =>
                {
                    b.HasOne("Library_KP.Models.Partition", "PartitionNameNavigation")
                        .WithMany("Books")
                        .HasForeignKey("PartitionName")
                        .HasConstraintName("FK_BOOK_PartitionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PartitionNameNavigation");
                });

            modelBuilder.Entity("Library_KP.Models.Terminal", b =>
                {
                    b.HasOne("Library_KP.Models.Reader", "NumberTicketsNavigation")
                        .WithMany("Terminals")
                        .HasForeignKey("NumberTickets")
                        .HasConstraintName("FK_TERMINAL_NumberTicket")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Library_KP.Models.Book", "RegistrationBook")
                        .WithMany("Terminals")
                        .HasForeignKey("RegistrationBookId")
                        .HasConstraintName("FK_TERMINAL_RegistrationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NumberTicketsNavigation");

                    b.Navigation("RegistrationBook");
                });

            modelBuilder.Entity("Library_KP.Models.Book", b =>
                {
                    b.Navigation("Terminals");
                });

            modelBuilder.Entity("Library_KP.Models.Partition", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Library_KP.Models.Reader", b =>
                {
                    b.Navigation("Terminals");
                });
#pragma warning restore 612, 618
        }
    }
}
